@using System.Security.Claims;
@using FitnessApp.Web.ViewModels.Models.Enums;
@model PagedList.IPagedList<DietsResultModel>
@inject Microsoft.AspNetCore.Identity.UserManager<User> UserManager

@{
    ViewBag.Title = "All Diets";
}

<h2 class="text-center">@ViewBag.Title</h2>
<hr />

<div class="text-start mb-3">
    <div class="d-inline-block" style="width: 30%;">
        <label for="SortingType" style="display: block;">Sort by:</label>
        <select id="SortingType" class="form-select" style="width: 100%;" onchange="handleSortingChange(this)">
            <option value="Default">Default</option>
            <option value="Newest">Newest</option>
            <option value="Oldest">Oldest</option>
        </select>
    </div>
</div>

<div id="dietsContainer" class="text-center row" data-sorting-type="@ViewBag.SortingType">
    @if (Model.Any())
    {
        @foreach (var diet in Model)
        {
            <div class="card col-4 mb-3" style="width: 30%;">
                <img class="card-img-top img-fluid" src="@diet.ImageUrl" alt="Diet Image" style="height: 200px; object-fit: cover;">
                <div class="card-body">
                    <p hidden>Id: @diet.DietId</p>
                    <h5 class="card-title mt-1">@diet.Name</h5>
                    <p class="mb-0">Description: @diet.Description</p>
                    <p class="mb-0">Calories: @diet.CaloriesIntake</p>
                </div>

                @if (User.Identity.IsAuthenticated)
                {
                    <form class="input-group-sm mb-3" asp-controller="Diet" asp-action="AddToCollection" asp-route-id="@diet.DietId">
                        <input type="submit" value="Add to my Favourites" class="btn btn-success btn-sm w-100" />
                    </form>
                     
                    @if (User.IsInRole("Admin"))
                    {
                        <div class="d-grid gap-2">
                            <form class="input-group-sm mb-3" asp-controller="Diet" asp-action="Edit" asp-route-id="@diet.DietId">
                                <input type="submit" value="Edit" class="btn btn-warning btn-sm w-100" />
                            </form>
                            <form class="input-group-sm mb-3" asp-controller="Diet" asp-action="Remove" asp-route-id="@diet.DietId" onsubmit="return confirm('Are you sure you want to delete this diet?')">
                                <input type="submit" value="Remove" class="btn btn-danger btn-sm w-100" />
                            </form>
                        </div>
                    }
                }
            </div>
        }
    }
    else
    {
        <p>No diets available yet.</p>
    }
</div>

@if (Model.PageCount > 1)
{
    <div class="pagination-container">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("GetAll", new { page = Model.PageNumber - 1, sortingType = Model.FirstOrDefault().SortingType })">Previous</a>
                </li>
            }
            @for (int i = 1; i <= Model.PageCount; i++)
            {
                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                    <a class="page-link" href="@Url.Action("GetAll", new { page = i, sortingType = Model.FirstOrDefault().SortingType })">@i</a>
                </li>
            }
            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("GetAll", new { page = Model.PageNumber + 1, sortingType = Model.FirstOrDefault().SortingType })">Next</a>
                </li>
            }
        </ul>
    </div>
}

<script>
    // Use event delegation for sorting
    $(document).on('click', '.pagination-container .page-link', function (e) {
        e.preventDefault();
        var sortingType = $('#SortingType').val();
        var url = $(this).attr('href') + '&sortingType=' + sortingType;

        loadDiets(url, sortingType); // Pass the sortingType to the loadDiets function
    });

    // Handle the sorting change event using the handleSortingChange function
    function handleSortingChange(selectElement) {
        var sortingType = selectElement.value;
        var baseUrl = '@Url.Action("GetAll")';
        var url = baseUrl + '?sortingType=' + sortingType;

        loadDiets(url, sortingType); // Pass the sortingType to the loadDiets function
    }

    function loadDiets(url, sortingType) {
        $.ajax({
            url: url,
            type: 'GET',
            success: function (result) {
                $('#dietsContainer').html($(result).find('#dietsContainer').html()); // Update the diets list with the new data returned from the controller
                $('#SortingType').val(sortingType); // Update the sorting type in the select element
                localStorage.setItem("sortingType", sortingType); // Update the sorting type in local storage
            },
            error: function (xhr, status, error) {
                console.error(error);
            }
        });
    }

    // On page load, restore the selected sorting type if it exists in local storage
    $(document).ready(function () {
        var storedSortingType = localStorage.getItem("sortingType");
        if (storedSortingType) {
            $('#SortingType').val(storedSortingType);
        }
    });
</script>